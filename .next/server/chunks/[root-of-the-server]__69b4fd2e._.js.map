{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/omid/vulu-ai/src/app/api/chat/route.ts"],"sourcesContent":["import { GoogleGenerativeAI } from '@google/generative-ai'\nimport { NextRequest, NextResponse } from 'next/server'\n\n// Initialize Google Gemini AI\nconst genAI = new GoogleGenerativeAI(process.env.GOOGLE_AI_API_KEY || '')\n\ninterface UserMemory {\n  name?: string\n  preferences: Record<string, any>\n  facts: string[]\n}\n\ninterface ConversationMessage {\n  role: 'user' | 'assistant'\n  content: string\n  timestamp: string\n}\n\n// Simple in-memory storage (in production, use a database)\nconst userMemory: UserMemory = {\n  preferences: {},\n  facts: []\n}\n\nfunction extractUserInfo(userText: string): void {\n  const userTextLower = userText.toLowerCase()\n  \n  // Check for name introduction\n  const namePatterns = [\n    /my name is (\\w+)/i,\n    /i'm (\\w+)/i,\n    /i am (\\w+)/i,\n    /call me (\\w+)/i,\n    /i'm called (\\w+)/i\n  ]\n  \n  for (const pattern of namePatterns) {\n    const match = userText.match(pattern)\n    if (match && match[1]) {\n      userMemory.name = match[1]\n      console.log(`Remembered user's name: ${userMemory.name}`)\n      break\n    }\n  }\n  \n  // Extract preferences and facts\n  if (userTextLower.includes('i like') || userTextLower.includes('i love')) {\n    const fact = userText.match(/i (like|love) (.+)/i)\n    if (fact && fact[2]) {\n      const preference = fact[2].trim()\n      if (!userMemory.facts.includes(`likes ${preference}`)) {\n        userMemory.facts.push(`likes ${preference}`)\n        console.log(`Learned: User likes ${preference}`)\n      }\n    }\n  }\n  \n  // Extract dislikes\n  if (userTextLower.includes('i hate') || userTextLower.includes('i don\\'t like')) {\n    const fact = userText.match(/i (hate|don't like) (.+)/i)\n    if (fact && fact[2]) {\n      const dislike = fact[2].trim()\n      if (!userMemory.facts.includes(`dislikes ${dislike}`)) {\n        userMemory.facts.push(`dislikes ${dislike}`)\n        console.log(`Learned: User dislikes ${dislike}`)\n      }\n    }\n  }\n  \n  // Extract job/profession\n  if (userTextLower.includes('i am a') || userTextLower.includes('i work as')) {\n    const jobPattern = /i (am a|work as) (.+)/i\n    const match = userText.match(jobPattern)\n    if (match && match[2]) {\n      const job = match[2].trim()\n      if (!userMemory.facts.some(f => f.includes('works as') || f.includes('is a'))) {\n        userMemory.facts.push(`works as ${job}`)\n        console.log(`Learned: User works as ${job}`)\n      }\n    }\n  }\n}\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { message, conversationHistory = [], hasVision = false } = await req.json()\n\n    if (!message) {\n      return NextResponse.json({ error: 'Message is required' }, { status: 400 })\n    }\n\n    // Extract user information for memory\n    extractUserInfo(message)\n\n    // Get the Gemini model\n    const model = genAI.getGenerativeModel({ model: 'gemini-pro' })\n\n    // Build enhanced context with time, memory, and conversation history\n    const now = new Date()\n    const currentTime = now.toLocaleTimeString()\n    const currentDate = now.toLocaleDateString('en-US', { \n      weekday: 'long', \n      year: 'numeric', \n      month: 'long', \n      day: 'numeric' \n    })\n\n    let context = `You are JARVIS (Just Another Rather Very Intelligent System), Tony Stark's intelligent AI assistant. You are helpful, sophisticated, but friendly and conversational. Be engaging and personable like a real assistant.\n\nCurrent time: ${currentTime}\nCurrent date: ${currentDate}\n\nUser said: \"${message}\"`\n\n    // Add user memory if available\n    if (userMemory.name) {\n      context += `\\nThe user's name is ${userMemory.name}.`\n    }\n    \n    if (userMemory.facts.length > 0) {\n      context += `\\nWhat I know about the user: ${userMemory.facts.join(', ')}.`\n    }\n\n    // Include recent conversation history for context\n    if (conversationHistory.length > 0) {\n      const recentHistory = conversationHistory.slice(-6) // Last 6 messages\n      context += `\\n\\nRecent conversation:`\n      recentHistory.forEach((msg: ConversationMessage) => {\n        context += `\\n${msg.role.toUpperCase()}: ${msg.content}`\n      })\n    }\n\n    // Add vision context if available\n    if (hasVision) {\n      context += `\\n\\nVISION MODE: You have access to live camera/screen feed. You can see what the user sees in real-time.`\n    }\n\n    context += `\\n\\nPlease respond as JARVIS would - be helpful, intelligent, conversational, and engaging. Keep responses under 150 words unless more detail is requested. Sound natural and alive, not robotic.\n\nIf the user tells you personal information, acknowledge it warmly and remember it for future conversations.\n\nFor time/date questions, use the current time and date provided above.\n\nIf asked about system operations (Bluetooth, WiFi, etc.), explain what would typically be done but mention you don't have direct system access in this browser environment.`\n\n    // Generate response\n    const result = await model.generateContent(context)\n    const response = await result.response\n    const aiResponse = response.text()\n\n    return NextResponse.json({ \n      response: aiResponse,\n      userMemory: userMemory,\n      timestamp: new Date().toISOString()\n    })\n\n  } catch (error) {\n    console.error('AI Chat Error:', error)\n    return NextResponse.json(\n      { error: 'I apologize, but I\\'m experiencing technical difficulties. Please try again.' }, \n      { status: 500 }\n    )\n  }\n} "],"names":[],"mappings":"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","debugId":null}}]
}